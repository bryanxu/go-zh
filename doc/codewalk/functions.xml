<!--
<codewalk title="First-Class Functions in Go">
-->

<codewalk title="Go中的一等函数">

<div class="english">
<step title="Introduction" src="doc/codewalk/pig.go">
	Go supports first class functions, higher-order functions, user-defined
	function types, function literals, closures, and multiple return values.
  <br/><br/>

	This rich feature set supports a functional programming style in a strongly
	typed language.
	<br/><br/>

	In this codewalk we will look at a simple program that simulates a dice game
	called <a href="http://en.wikipedia.org/wiki/Pig_(dice)">Pig</a> and evaluates
	basic strategies.
</step>
</div>

<step title="引言" src="doc/codewalk/pig.go">
	Go支持一等函数、高阶函数、用户定义的函数类型、函数字面、闭包以及多返回值。
	<br/><br/>

	此丰富的特性集在强类型语言中支持函数式编程风格。
	<br/><br/>

	在这个代码漫步中，我们将看到一个简单的程序，它模拟了一个叫做
	<a href="http://en.wikipedia.org/wiki/Pig_(dice)">Pig</a>
	的骰子游戏并求值基本的策略。
</step>

<div class="english">
<step title="Game overview" src="doc/codewalk/pig.go:/\/\/ A score/,/thisTurn int\n}/">
  Pig is a two-player game played with a 6-sided die.  Each turn, you may roll or stay.
	<ul>
		<li> If you roll a 1, you lose all points for your turn and play passes to
			your opponent.  Any other roll adds its value to your turn score.  </li>
		<li> If you stay, your turn score is added to your total score, and play passes
			to your opponent.  </li>
	</ul>

	The first person to reach 100 total points wins.
	<br/><br/>

	The <code>score</code> type stores the scores of the current and opposing
	players, in addition to the points accumulated during the current turn.
</step>
</div>

<step title="游戏概览" src="doc/codewalk/pig.go:/\/\/ 总分/,/thisTurn int\n}/">
	Pig是由两个玩家掷6面骰子的游戏。在每一轮中，你可能掷骰或停留。
	<ul>
		<li>如果你掷出了1，就会失去你在这轮中的所有点数，并交由你的对手玩。
			掷出的其它值都将计入你这轮的分数中。</li>
		<li>如果你停留了，你这轮的分数就会计入你的总分中，并交由你的对手玩。</li>
	</ul>

	总点数先达到100的人胜出。
	<br/><br/>

	<code>score</code> 类型存储了当前的分数与对手玩家，还有当前这一轮中累积的点数。
</step>

<div class="english">
<step title="User-defined function types" src="doc/codewalk/pig.go:/\/\/ An action/,/bool\)/">
	In Go, functions can be passed around just like any other value. A function's
	type signature describes the types of its arguments and return values.
	<br/><br/>

	The <code>action</code> type is a function that takes a <code>score</code>
	and returns the resulting <code>score</code> and whether the current turn is
	over.
	<br/><br/>

  If the turn is over, the <code>player</code> and <code>opponent</code> fields
  in the resulting <code>score</code> should be swapped, as it is now the other player's
  turn.
</step>
</div>

<step title="用户定义函数类型" src="doc/codewalk/pig.go:/\/\/ action/,/bool\)/">
	在Go中，函数可以像其它值那样到处传递。一个函数的类型签名描述了其实参与返回值的类型。
	<br/><br/>

	<code>action</code> 是一个函数，它接受一个 <code>score</code> 并返回产生的
	<code>score</code> 与当前一轮是否结束。
	<br/><br/>

	如果当前一轮结束，则产生的 <code>score</code> 中的 <code>player</code> 和
	<code>opponent</code> 字段就会互换，然后就轮到另一个玩家了。
</step>

<div class="english">
<step title="Multiple return values" src="doc/codewalk/pig.go:/\/\/ roll returns/,/true\n}/">
	Go functions can return multiple values.
	<br/><br/>

	The functions <code>roll</code> and <code>stay</code> each return a pair of
	values.  They also match the <code>action</code> type signature.  These
	<code>action</code> functions define the rules of Pig.
</step>
</div>

<step title="多返回值" src="doc/codewalk/pig.go:/\/\/ roll 返回/,/true\n}/">
	Go的函数可以返回多个值。
	<br/><br/>

	函数 <code>roll</code> 和 <code>stay</code> 都返回一对值。它们也匹配
	<code>action</code> 的类型签名。这些 <code>action</code> 类型的函数定义了Pig的规则。
</step>

<div class="english">
<step title="Higher-order functions" src="doc/codewalk/pig.go:/\/\/ A strategy/,/action\n/">
	A function can use other functions as arguments and return values.
	<br/><br/>

  A <code>strategy</code> is a function that takes a <code>score</code> as input
  and returns an <code>action</code> to perform.  <br/>
  (Remember, an <code>action</code> is itself a function.)
</step>
</div>

<step title="高阶函数" src="doc/codewalk/pig.go:/\/\/ strategy/,/action\n/">
	一个函数能够将其它函数作为实参和返回值。
	<br/><br/>

	<code>strategy</code> 函数接受一个 <code>score</code> 作为输入并返回一个
	<code>action</code> 来执行。<br/>
	（记住，<code>action</code> 本身就是一个函数。）
</step>

<div class="english">
<step title="Function literals and closures" src="doc/codewalk/pig.go:/return func/,/return roll\n\t}/">
	Anonymous functions can be declared in Go, as in this example.  Function
	literals are closures: they inherit the scope of the function in which they
	are declared.
	<br/><br/>

	One basic strategy in Pig is to continue rolling until you have accumulated at
	least k points in a turn, and then stay.  The argument <code>k</code> is
	enclosed by this function literal, which matches the <code>strategy</code> type
	signature.
</step>
</div>

<step title="函数字面与闭包" src="doc/codewalk/pig.go:/return func/,/return roll\n\t}/">
	Go中可以声明匿名函数，就像这个例子中那样。函数字面是闭包的：
	它们继承了声明它们所在函数的作用域。
	<br/><br/>

	Pig中的一个基本策略就是继续掷骰直到你在本轮中累计的点数至少为 k，然后停留。
	实参 <code>k</code> 包含在此函数字面中，该函数字面与 <code>strategy</code>
	类型签名相匹配。
</step>

<div class="english">
<step title="Simulating games" src="doc/codewalk/pig.go:/\/\/ play/,/currentPlayer\n}/">
  We simulate a game of Pig by calling an <code>action</code> to update the
  <code>score</code> until one player reaches 100 points.  Each
  <code>action</code> is selected by calling the <code>strategy</code> function
  associated with the current player.
</step>
</div>

<step title="模拟游戏" src="doc/codewalk/pig.go:/\/\/ play 模拟/,/currentPlayer\n}/">
	我们这样来模拟一场Pig游戏：通过调用一个 <code>action</code> 来更新
	<code>score</code>，直到一个玩家达到100点为止。每一个 <code>action</code>
	都通过调用与当前玩家相关联的 <code>strategy</code> 函数来确定。
</step>

<div class="english">
<step title="Simulating a tournament" src="doc/codewalk/pig.go:/\/\/ roundRobin/,/gamesPerStrategy\n}/">
	The <code>roundRobin</code> function simulates a tournament and tallies wins.
	Each strategy plays each other strategy <code>gamesPerSeries</code> times.
</step>
</div>

<step title="模拟一场比赛" src="doc/codewalk/pig.go:/\/\/ roundRobin 模拟/,/gamesPerStrategy\n}/">
	<code>roundRobin</code> 函数模拟一场比赛并记录输赢。每一个策略与其它策略互相比
	<code>gamesPerSeries</code> 次。
</step>

<div class="english">
<step title="Variadic function declarations" src="doc/codewalk/pig.go:/\/\/ ratioS/,/string {/">
	Variadic functions like <code>ratioString</code> take a variable number of
	arguments.  These arguments are available as a slice inside the function.
</step>
</div>

<step title="变参函数声明" src="doc/codewalk/pig.go:/\/\/ ratioString 接受/,/string {/">
	像 <code>ratioString</code> 这样的变参函数接受数量可变的实参。
	这些参数实参在该函数中可作为一个切片使用。
</step>

<div class="english">
<step title="Simulation results" src="doc/codewalk/pig.go:/func main/,/\n}/">
	The <code>main</code> function defines 100 basic strategies, simulates a round
	robin tournament, and then prints the win/loss record of each strategy.
	<br/><br/>

	Among these strategies, staying at 25 is best, but the <a
	href="http://www.google.com/search?q=optimal+play+pig">optimal strategy for
	Pig</a> is much more complex.
</step>
</div>

<step title="模拟的结果" src="doc/codewalk/pig.go:/func main/,/\n}/">
	<code>main</code> 函数定义了100个基本策略，模拟一场比赛，并打印出每一个策略的输/赢记录。
	<br/><br/>

	在这些策略中，最好是停留了25次，不过
	<a href="http://www.google.com/search?q=optimal+play+pig">Pig的最佳策略</a>
	则更加复杂。
</step>

</codewalk>
